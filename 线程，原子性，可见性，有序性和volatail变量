1.进程和线程
进程是资源调度和分配的基本单位，线程是CPU分配的基本单位。多个线程共享进程的资源（堆栈，上下文，寄存器）。进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束

2.原子性
原子性，所谓原子性就是不可分割性，是指某组操作是一个不可分割的部分。
Java提供了一种内置锁来支持原子性，叫做同步代码块（Synchronized block）.
若父类中的某个方法，和子类重写的该方法都是Synchronized方法，那么调用这个两个方法时，都会加上父类的锁，所以如果内置锁不可重入，则可能会发生死锁。

3.可见性
  其实就是执行读操作的线程能够看到其他线程写入的值。即多个线程对内存的写入都是可见性。可见性需要使用同步机制来实现。

4.有序性
 就是让程序按照代码的顺序串行执行，不进行重新排序。

5.volatail变量
    Volatail变量是一种削弱的同步机制，用来确保变量的更新操作通知到其他线程，也就是说编译器会把volatail变量标记为共享变量，不会让对volatail变量的操作和其他内存操作一起重排序。Volatail变量总是可见的，不会被缓存到如寄存器之类的处理器不可见的地方，所以每次读都是读取最新的值。
Volatial变量的优势：
（1）volatail变量的访问不会加锁，所以它不会造成线程阻塞，这就是一种比Syncronized更加轻量级的同步机制。
 (2) volatail变量提供了变量状态的可见性。 
Volatail变量在什么情况下使用？
仅当volatail变量能够简化代码的实现以及对同步策略的验证时，使用它：
（1）	确保他们自身状态的可见性。
（2）	确保他们所引用的对象的状态的可见性。
（3）	标识一些重要的程序生命周期事件的发生。
（注：当在验证正确性的时候需要进行复杂的可见性判断时，就不要使用volatail变量）
使用volatail变量的条件：
（1）	对变量的写入操作不依赖变量的当前值（反例：i++），或者你能确保只有单线程来访问这个变量。
（2）	该变量不会和其它变量一起纳入不变性条件种
（3）	在访问变量时不需要枷锁
典型用法：判断时否推出循环的某个标记变量。

